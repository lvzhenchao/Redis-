
1：完全基于内存，绝大部分是内存操作；类似HashMap,HashMap优势就是查找和操作

2：数据结构简单，数据操作也简单；专门设计的

3：单线程，避免上下文切换，也没有多进程切换导致的消耗，不用考虑锁

4：多路I/O复用模型，非阻塞IO

5：底层模型不同，VM机制


注：
	多路IO复用：利用select、poll、epoll可以同时监察多个流的I/O事件的能力；空闲的时候，会把当前线程阻塞掉，有一个或多个流事件时
		就从阻塞状态中唤醒，轮询一遍所有的流（epoll只轮询那些真正发出事件的流），并依次处理就绪的流

	多路指的就是多个网络连接；复用指的就是复用同一个线程；复用技术可以让单个线程高效处理多个连接请求


	select具有O(n)的无差别轮询复杂度 处理的流越多，无差别轮询时间就越长

	poll没有最大连接数的限制,它是基于链表来存储的

	epoll可以理解为event poll，不同于忙轮询和无差别轮询 事件驱动（每个事件关联上fd


	VM:
		Redis的VM(虚拟内存)机制就是暂时把不经常访问的数据(冷数据)从内存交换到磁盘中，
		内存空间用于其它需要访问的数据(热数据)。
		通过VM功能可以实现冷热数据分离，使热数据仍在内存中、冷数据保存到磁盘
		Redis提高数据库容量的办法有两种：
			一种是可以将数据分割到多个Redis 另一种是使用虚拟内存把那些不经常访问的数据交换到磁盘上。需要特别注意的是Redis并没有使用OS提供的Swap，而是自己实现
